/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeepFaceVerificationModel
    /// </summary>
    [DataContract(Name = "DeepFaceVerificationModel")]
    public partial class DeepFaceVerificationModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeepFaceVerificationModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeepFaceVerificationModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeepFaceVerificationModel" /> class.
        /// </summary>
        /// <param name="model">model (required).</param>
        /// <param name="deepfaceVerify">deepfaceVerify (required).</param>
        /// <param name="threshold">threshold (required).</param>
        /// <param name="cosineDistance">cosineDistance (required).</param>
        /// <param name="detectorBackend">detectorBackend (required).</param>
        public DeepFaceVerificationModel(string model = default(string), bool deepfaceVerify = default(bool), decimal threshold = default(decimal), decimal cosineDistance = default(decimal), string detectorBackend = default(string))
        {
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for DeepFaceVerificationModel and cannot be null");
            }
            this.Model = model;
            this.DeepfaceVerify = deepfaceVerify;
            this.Threshold = threshold;
            this.CosineDistance = cosineDistance;
            // to ensure "detectorBackend" is required (not null)
            if (detectorBackend == null)
            {
                throw new ArgumentNullException("detectorBackend is a required property for DeepFaceVerificationModel and cannot be null");
            }
            this.DetectorBackend = detectorBackend;
        }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets DeepfaceVerify
        /// </summary>
        [DataMember(Name = "deepface_verify", IsRequired = true, EmitDefaultValue = true)]
        public bool DeepfaceVerify { get; set; }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name = "threshold", IsRequired = true, EmitDefaultValue = true)]
        public decimal Threshold { get; set; }

        /// <summary>
        /// Gets or Sets CosineDistance
        /// </summary>
        [DataMember(Name = "cosine_distance", IsRequired = true, EmitDefaultValue = true)]
        public decimal CosineDistance { get; set; }

        /// <summary>
        /// Gets or Sets DetectorBackend
        /// </summary>
        [DataMember(Name = "detector_backend", IsRequired = true, EmitDefaultValue = true)]
        public string DetectorBackend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeepFaceVerificationModel {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  DeepfaceVerify: ").Append(DeepfaceVerify).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  CosineDistance: ").Append(CosineDistance).Append("\n");
            sb.Append("  DetectorBackend: ").Append(DetectorBackend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
