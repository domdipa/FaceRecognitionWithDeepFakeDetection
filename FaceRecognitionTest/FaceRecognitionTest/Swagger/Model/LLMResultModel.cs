/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LLMResultModel
    /// </summary>
    [DataContract(Name = "LLMResultModel")]
    public partial class LLMResultModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LLMResultModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LLMResultModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LLMResultModel" /> class.
        /// </summary>
        /// <param name="verified">verified (required).</param>
        /// <param name="similarity">similarity (required).</param>
        /// <param name="confidenceScore">confidenceScore (required).</param>
        /// <param name="explanation">explanation (required).</param>
        /// <param name="testValid">testValid (required).</param>
        public LLMResultModel(bool verified = default(bool), decimal similarity = default(decimal), decimal confidenceScore = default(decimal), string explanation = default(string), bool testValid = default(bool))
        {
            this.Verified = verified;
            this.Similarity = similarity;
            this.ConfidenceScore = confidenceScore;
            // to ensure "explanation" is required (not null)
            if (explanation == null)
            {
                throw new ArgumentNullException("explanation is a required property for LLMResultModel and cannot be null");
            }
            this.Explanation = explanation;
            this.TestValid = testValid;
        }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name = "verified", IsRequired = true, EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Gets or Sets Similarity
        /// </summary>
        [DataMember(Name = "similarity", IsRequired = true, EmitDefaultValue = true)]
        public decimal Similarity { get; set; }

        /// <summary>
        /// Gets or Sets ConfidenceScore
        /// </summary>
        [DataMember(Name = "confidence_score", IsRequired = true, EmitDefaultValue = true)]
        public decimal ConfidenceScore { get; set; }

        /// <summary>
        /// Gets or Sets Explanation
        /// </summary>
        [DataMember(Name = "explanation", IsRequired = true, EmitDefaultValue = true)]
        public string Explanation { get; set; }

        /// <summary>
        /// Gets or Sets TestValid
        /// </summary>
        [DataMember(Name = "test_valid", IsRequired = true, EmitDefaultValue = true)]
        public bool TestValid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LLMResultModel {\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Similarity: ").Append(Similarity).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  TestValid: ").Append(TestValid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
