/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FaceDetectionModel
    /// </summary>
    [DataContract(Name = "FaceDetectionModel")]
    public partial class FaceDetectionModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceDetectionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaceDetectionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceDetectionModel" /> class.
        /// </summary>
        /// <param name="deepfaceVerificationList">deepfaceVerificationList (required).</param>
        /// <param name="face1FaceLandmarks">face1FaceLandmarks.</param>
        /// <param name="face2FaceLandmarks">face2FaceLandmarks.</param>
        public FaceDetectionModel(List<DeepFaceVerificationModel> deepfaceVerificationList = default(List<DeepFaceVerificationModel>), FaceLandmarks face1FaceLandmarks = default(FaceLandmarks), FaceLandmarks face2FaceLandmarks = default(FaceLandmarks))
        {
            // to ensure "deepfaceVerificationList" is required (not null)
            if (deepfaceVerificationList == null)
            {
                throw new ArgumentNullException("deepfaceVerificationList is a required property for FaceDetectionModel and cannot be null");
            }
            this.DeepfaceVerificationList = deepfaceVerificationList;
            this.Face1FaceLandmarks = face1FaceLandmarks;
            this.Face2FaceLandmarks = face2FaceLandmarks;
        }

        /// <summary>
        /// Gets or Sets DeepfaceVerificationList
        /// </summary>
        [DataMember(Name = "deepface_verification_list", IsRequired = true, EmitDefaultValue = true)]
        public List<DeepFaceVerificationModel> DeepfaceVerificationList { get; set; }

        /// <summary>
        /// Gets or Sets Face1FaceLandmarks
        /// </summary>
        [DataMember(Name = "face1_face_landmarks", EmitDefaultValue = true)]
        public FaceLandmarks Face1FaceLandmarks { get; set; }

        /// <summary>
        /// Gets or Sets Face2FaceLandmarks
        /// </summary>
        [DataMember(Name = "face2_face_landmarks", EmitDefaultValue = true)]
        public FaceLandmarks Face2FaceLandmarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceDetectionModel {\n");
            sb.Append("  DeepfaceVerificationList: ").Append(DeepfaceVerificationList).Append("\n");
            sb.Append("  Face1FaceLandmarks: ").Append(Face1FaceLandmarks).Append("\n");
            sb.Append("  Face2FaceLandmarks: ").Append(Face2FaceLandmarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
