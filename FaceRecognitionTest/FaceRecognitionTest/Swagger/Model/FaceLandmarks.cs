/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FaceLandmarks
    /// </summary>
    [DataContract(Name = "FaceLandmarks")]
    public partial class FaceLandmarks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceLandmarks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaceLandmarks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceLandmarks" /> class.
        /// </summary>
        /// <param name="imageShape">imageShape (required).</param>
        /// <param name="silhouette">silhouette (required).</param>
        /// <param name="lipsUpperOuter">lipsUpperOuter (required).</param>
        /// <param name="lipsLowerOuter">lipsLowerOuter (required).</param>
        /// <param name="lipsUpperInner">lipsUpperInner (required).</param>
        /// <param name="lipsLowerInner">lipsLowerInner (required).</param>
        /// <param name="rightEyeUpper0">rightEyeUpper0 (required).</param>
        /// <param name="rightEyeLower0">rightEyeLower0 (required).</param>
        /// <param name="rightEyeUpper1">rightEyeUpper1 (required).</param>
        /// <param name="rightEyeLower1">rightEyeLower1 (required).</param>
        /// <param name="rightEyeUpper2">rightEyeUpper2 (required).</param>
        /// <param name="rightEyeLower2">rightEyeLower2 (required).</param>
        /// <param name="rightEyeLower3">rightEyeLower3 (required).</param>
        /// <param name="rightEyebrowUpper">rightEyebrowUpper (required).</param>
        /// <param name="rightEyebrowLower">rightEyebrowLower (required).</param>
        /// <param name="rightEyeIris">rightEyeIris (required).</param>
        /// <param name="leftEyeUpper0">leftEyeUpper0 (required).</param>
        /// <param name="leftEyeLower0">leftEyeLower0 (required).</param>
        /// <param name="leftEyeUpper1">leftEyeUpper1 (required).</param>
        /// <param name="leftEyeLower1">leftEyeLower1 (required).</param>
        /// <param name="leftEyeUpper2">leftEyeUpper2 (required).</param>
        /// <param name="leftEyeLower2">leftEyeLower2 (required).</param>
        /// <param name="leftEyeLower3">leftEyeLower3 (required).</param>
        /// <param name="leftEyebrowUpper">leftEyebrowUpper (required).</param>
        /// <param name="leftEyebrowLower">leftEyebrowLower (required).</param>
        /// <param name="leftEyeIris">leftEyeIris (required).</param>
        /// <param name="midwayBetweenEyes">midwayBetweenEyes (required).</param>
        /// <param name="noseTip">noseTip (required).</param>
        /// <param name="noseBottom">noseBottom (required).</param>
        /// <param name="noseRightCorner">noseRightCorner (required).</param>
        /// <param name="noseLeftCorner">noseLeftCorner (required).</param>
        /// <param name="rightCheek">rightCheek (required).</param>
        /// <param name="leftCheek">leftCheek (required).</param>
        public FaceLandmarks(string imageShape = default(string), List<LandmarkPoint> silhouette = default(List<LandmarkPoint>), List<LandmarkPoint> lipsUpperOuter = default(List<LandmarkPoint>), List<LandmarkPoint> lipsLowerOuter = default(List<LandmarkPoint>), List<LandmarkPoint> lipsUpperInner = default(List<LandmarkPoint>), List<LandmarkPoint> lipsLowerInner = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeUpper0 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeLower0 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeUpper1 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeLower1 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeUpper2 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeLower2 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeLower3 = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyebrowUpper = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyebrowLower = default(List<LandmarkPoint>), List<LandmarkPoint> rightEyeIris = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeUpper0 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeLower0 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeUpper1 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeLower1 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeUpper2 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeLower2 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeLower3 = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyebrowUpper = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyebrowLower = default(List<LandmarkPoint>), List<LandmarkPoint> leftEyeIris = default(List<LandmarkPoint>), List<LandmarkPoint> midwayBetweenEyes = default(List<LandmarkPoint>), List<LandmarkPoint> noseTip = default(List<LandmarkPoint>), List<LandmarkPoint> noseBottom = default(List<LandmarkPoint>), List<LandmarkPoint> noseRightCorner = default(List<LandmarkPoint>), List<LandmarkPoint> noseLeftCorner = default(List<LandmarkPoint>), List<LandmarkPoint> rightCheek = default(List<LandmarkPoint>), List<LandmarkPoint> leftCheek = default(List<LandmarkPoint>))
        {
            // to ensure "imageShape" is required (not null)
            if (imageShape == null)
            {
                throw new ArgumentNullException("imageShape is a required property for FaceLandmarks and cannot be null");
            }
            this.ImageShape = imageShape;
            // to ensure "silhouette" is required (not null)
            if (silhouette == null)
            {
                throw new ArgumentNullException("silhouette is a required property for FaceLandmarks and cannot be null");
            }
            this.Silhouette = silhouette;
            // to ensure "lipsUpperOuter" is required (not null)
            if (lipsUpperOuter == null)
            {
                throw new ArgumentNullException("lipsUpperOuter is a required property for FaceLandmarks and cannot be null");
            }
            this.LipsUpperOuter = lipsUpperOuter;
            // to ensure "lipsLowerOuter" is required (not null)
            if (lipsLowerOuter == null)
            {
                throw new ArgumentNullException("lipsLowerOuter is a required property for FaceLandmarks and cannot be null");
            }
            this.LipsLowerOuter = lipsLowerOuter;
            // to ensure "lipsUpperInner" is required (not null)
            if (lipsUpperInner == null)
            {
                throw new ArgumentNullException("lipsUpperInner is a required property for FaceLandmarks and cannot be null");
            }
            this.LipsUpperInner = lipsUpperInner;
            // to ensure "lipsLowerInner" is required (not null)
            if (lipsLowerInner == null)
            {
                throw new ArgumentNullException("lipsLowerInner is a required property for FaceLandmarks and cannot be null");
            }
            this.LipsLowerInner = lipsLowerInner;
            // to ensure "rightEyeUpper0" is required (not null)
            if (rightEyeUpper0 == null)
            {
                throw new ArgumentNullException("rightEyeUpper0 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeUpper0 = rightEyeUpper0;
            // to ensure "rightEyeLower0" is required (not null)
            if (rightEyeLower0 == null)
            {
                throw new ArgumentNullException("rightEyeLower0 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeLower0 = rightEyeLower0;
            // to ensure "rightEyeUpper1" is required (not null)
            if (rightEyeUpper1 == null)
            {
                throw new ArgumentNullException("rightEyeUpper1 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeUpper1 = rightEyeUpper1;
            // to ensure "rightEyeLower1" is required (not null)
            if (rightEyeLower1 == null)
            {
                throw new ArgumentNullException("rightEyeLower1 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeLower1 = rightEyeLower1;
            // to ensure "rightEyeUpper2" is required (not null)
            if (rightEyeUpper2 == null)
            {
                throw new ArgumentNullException("rightEyeUpper2 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeUpper2 = rightEyeUpper2;
            // to ensure "rightEyeLower2" is required (not null)
            if (rightEyeLower2 == null)
            {
                throw new ArgumentNullException("rightEyeLower2 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeLower2 = rightEyeLower2;
            // to ensure "rightEyeLower3" is required (not null)
            if (rightEyeLower3 == null)
            {
                throw new ArgumentNullException("rightEyeLower3 is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeLower3 = rightEyeLower3;
            // to ensure "rightEyebrowUpper" is required (not null)
            if (rightEyebrowUpper == null)
            {
                throw new ArgumentNullException("rightEyebrowUpper is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyebrowUpper = rightEyebrowUpper;
            // to ensure "rightEyebrowLower" is required (not null)
            if (rightEyebrowLower == null)
            {
                throw new ArgumentNullException("rightEyebrowLower is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyebrowLower = rightEyebrowLower;
            // to ensure "rightEyeIris" is required (not null)
            if (rightEyeIris == null)
            {
                throw new ArgumentNullException("rightEyeIris is a required property for FaceLandmarks and cannot be null");
            }
            this.RightEyeIris = rightEyeIris;
            // to ensure "leftEyeUpper0" is required (not null)
            if (leftEyeUpper0 == null)
            {
                throw new ArgumentNullException("leftEyeUpper0 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeUpper0 = leftEyeUpper0;
            // to ensure "leftEyeLower0" is required (not null)
            if (leftEyeLower0 == null)
            {
                throw new ArgumentNullException("leftEyeLower0 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeLower0 = leftEyeLower0;
            // to ensure "leftEyeUpper1" is required (not null)
            if (leftEyeUpper1 == null)
            {
                throw new ArgumentNullException("leftEyeUpper1 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeUpper1 = leftEyeUpper1;
            // to ensure "leftEyeLower1" is required (not null)
            if (leftEyeLower1 == null)
            {
                throw new ArgumentNullException("leftEyeLower1 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeLower1 = leftEyeLower1;
            // to ensure "leftEyeUpper2" is required (not null)
            if (leftEyeUpper2 == null)
            {
                throw new ArgumentNullException("leftEyeUpper2 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeUpper2 = leftEyeUpper2;
            // to ensure "leftEyeLower2" is required (not null)
            if (leftEyeLower2 == null)
            {
                throw new ArgumentNullException("leftEyeLower2 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeLower2 = leftEyeLower2;
            // to ensure "leftEyeLower3" is required (not null)
            if (leftEyeLower3 == null)
            {
                throw new ArgumentNullException("leftEyeLower3 is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeLower3 = leftEyeLower3;
            // to ensure "leftEyebrowUpper" is required (not null)
            if (leftEyebrowUpper == null)
            {
                throw new ArgumentNullException("leftEyebrowUpper is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyebrowUpper = leftEyebrowUpper;
            // to ensure "leftEyebrowLower" is required (not null)
            if (leftEyebrowLower == null)
            {
                throw new ArgumentNullException("leftEyebrowLower is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyebrowLower = leftEyebrowLower;
            // to ensure "leftEyeIris" is required (not null)
            if (leftEyeIris == null)
            {
                throw new ArgumentNullException("leftEyeIris is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftEyeIris = leftEyeIris;
            // to ensure "midwayBetweenEyes" is required (not null)
            if (midwayBetweenEyes == null)
            {
                throw new ArgumentNullException("midwayBetweenEyes is a required property for FaceLandmarks and cannot be null");
            }
            this.MidwayBetweenEyes = midwayBetweenEyes;
            // to ensure "noseTip" is required (not null)
            if (noseTip == null)
            {
                throw new ArgumentNullException("noseTip is a required property for FaceLandmarks and cannot be null");
            }
            this.NoseTip = noseTip;
            // to ensure "noseBottom" is required (not null)
            if (noseBottom == null)
            {
                throw new ArgumentNullException("noseBottom is a required property for FaceLandmarks and cannot be null");
            }
            this.NoseBottom = noseBottom;
            // to ensure "noseRightCorner" is required (not null)
            if (noseRightCorner == null)
            {
                throw new ArgumentNullException("noseRightCorner is a required property for FaceLandmarks and cannot be null");
            }
            this.NoseRightCorner = noseRightCorner;
            // to ensure "noseLeftCorner" is required (not null)
            if (noseLeftCorner == null)
            {
                throw new ArgumentNullException("noseLeftCorner is a required property for FaceLandmarks and cannot be null");
            }
            this.NoseLeftCorner = noseLeftCorner;
            // to ensure "rightCheek" is required (not null)
            if (rightCheek == null)
            {
                throw new ArgumentNullException("rightCheek is a required property for FaceLandmarks and cannot be null");
            }
            this.RightCheek = rightCheek;
            // to ensure "leftCheek" is required (not null)
            if (leftCheek == null)
            {
                throw new ArgumentNullException("leftCheek is a required property for FaceLandmarks and cannot be null");
            }
            this.LeftCheek = leftCheek;
        }

        /// <summary>
        /// Gets or Sets ImageShape
        /// </summary>
        [DataMember(Name = "image_shape", IsRequired = true, EmitDefaultValue = true)]
        public string ImageShape { get; set; }

        /// <summary>
        /// Gets or Sets Silhouette
        /// </summary>
        [DataMember(Name = "silhouette", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> Silhouette { get; set; }

        /// <summary>
        /// Gets or Sets LipsUpperOuter
        /// </summary>
        [DataMember(Name = "lipsUpperOuter", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LipsUpperOuter { get; set; }

        /// <summary>
        /// Gets or Sets LipsLowerOuter
        /// </summary>
        [DataMember(Name = "lipsLowerOuter", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LipsLowerOuter { get; set; }

        /// <summary>
        /// Gets or Sets LipsUpperInner
        /// </summary>
        [DataMember(Name = "lipsUpperInner", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LipsUpperInner { get; set; }

        /// <summary>
        /// Gets or Sets LipsLowerInner
        /// </summary>
        [DataMember(Name = "lipsLowerInner", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LipsLowerInner { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeUpper0
        /// </summary>
        [DataMember(Name = "rightEyeUpper0", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeUpper0 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeLower0
        /// </summary>
        [DataMember(Name = "rightEyeLower0", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeLower0 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeUpper1
        /// </summary>
        [DataMember(Name = "rightEyeUpper1", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeUpper1 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeLower1
        /// </summary>
        [DataMember(Name = "rightEyeLower1", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeLower1 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeUpper2
        /// </summary>
        [DataMember(Name = "rightEyeUpper2", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeUpper2 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeLower2
        /// </summary>
        [DataMember(Name = "rightEyeLower2", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeLower2 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeLower3
        /// </summary>
        [DataMember(Name = "rightEyeLower3", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeLower3 { get; set; }

        /// <summary>
        /// Gets or Sets RightEyebrowUpper
        /// </summary>
        [DataMember(Name = "rightEyebrowUpper", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyebrowUpper { get; set; }

        /// <summary>
        /// Gets or Sets RightEyebrowLower
        /// </summary>
        [DataMember(Name = "rightEyebrowLower", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyebrowLower { get; set; }

        /// <summary>
        /// Gets or Sets RightEyeIris
        /// </summary>
        [DataMember(Name = "rightEyeIris", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightEyeIris { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeUpper0
        /// </summary>
        [DataMember(Name = "leftEyeUpper0", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeUpper0 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeLower0
        /// </summary>
        [DataMember(Name = "leftEyeLower0", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeLower0 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeUpper1
        /// </summary>
        [DataMember(Name = "leftEyeUpper1", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeUpper1 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeLower1
        /// </summary>
        [DataMember(Name = "leftEyeLower1", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeLower1 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeUpper2
        /// </summary>
        [DataMember(Name = "leftEyeUpper2", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeUpper2 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeLower2
        /// </summary>
        [DataMember(Name = "leftEyeLower2", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeLower2 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeLower3
        /// </summary>
        [DataMember(Name = "leftEyeLower3", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeLower3 { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyebrowUpper
        /// </summary>
        [DataMember(Name = "leftEyebrowUpper", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyebrowUpper { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyebrowLower
        /// </summary>
        [DataMember(Name = "leftEyebrowLower", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyebrowLower { get; set; }

        /// <summary>
        /// Gets or Sets LeftEyeIris
        /// </summary>
        [DataMember(Name = "leftEyeIris", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftEyeIris { get; set; }

        /// <summary>
        /// Gets or Sets MidwayBetweenEyes
        /// </summary>
        [DataMember(Name = "midwayBetweenEyes", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> MidwayBetweenEyes { get; set; }

        /// <summary>
        /// Gets or Sets NoseTip
        /// </summary>
        [DataMember(Name = "noseTip", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> NoseTip { get; set; }

        /// <summary>
        /// Gets or Sets NoseBottom
        /// </summary>
        [DataMember(Name = "noseBottom", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> NoseBottom { get; set; }

        /// <summary>
        /// Gets or Sets NoseRightCorner
        /// </summary>
        [DataMember(Name = "noseRightCorner", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> NoseRightCorner { get; set; }

        /// <summary>
        /// Gets or Sets NoseLeftCorner
        /// </summary>
        [DataMember(Name = "noseLeftCorner", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> NoseLeftCorner { get; set; }

        /// <summary>
        /// Gets or Sets RightCheek
        /// </summary>
        [DataMember(Name = "rightCheek", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> RightCheek { get; set; }

        /// <summary>
        /// Gets or Sets LeftCheek
        /// </summary>
        [DataMember(Name = "leftCheek", IsRequired = true, EmitDefaultValue = true)]
        public List<LandmarkPoint> LeftCheek { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceLandmarks {\n");
            sb.Append("  ImageShape: ").Append(ImageShape).Append("\n");
            sb.Append("  Silhouette: ").Append(Silhouette).Append("\n");
            sb.Append("  LipsUpperOuter: ").Append(LipsUpperOuter).Append("\n");
            sb.Append("  LipsLowerOuter: ").Append(LipsLowerOuter).Append("\n");
            sb.Append("  LipsUpperInner: ").Append(LipsUpperInner).Append("\n");
            sb.Append("  LipsLowerInner: ").Append(LipsLowerInner).Append("\n");
            sb.Append("  RightEyeUpper0: ").Append(RightEyeUpper0).Append("\n");
            sb.Append("  RightEyeLower0: ").Append(RightEyeLower0).Append("\n");
            sb.Append("  RightEyeUpper1: ").Append(RightEyeUpper1).Append("\n");
            sb.Append("  RightEyeLower1: ").Append(RightEyeLower1).Append("\n");
            sb.Append("  RightEyeUpper2: ").Append(RightEyeUpper2).Append("\n");
            sb.Append("  RightEyeLower2: ").Append(RightEyeLower2).Append("\n");
            sb.Append("  RightEyeLower3: ").Append(RightEyeLower3).Append("\n");
            sb.Append("  RightEyebrowUpper: ").Append(RightEyebrowUpper).Append("\n");
            sb.Append("  RightEyebrowLower: ").Append(RightEyebrowLower).Append("\n");
            sb.Append("  RightEyeIris: ").Append(RightEyeIris).Append("\n");
            sb.Append("  LeftEyeUpper0: ").Append(LeftEyeUpper0).Append("\n");
            sb.Append("  LeftEyeLower0: ").Append(LeftEyeLower0).Append("\n");
            sb.Append("  LeftEyeUpper1: ").Append(LeftEyeUpper1).Append("\n");
            sb.Append("  LeftEyeLower1: ").Append(LeftEyeLower1).Append("\n");
            sb.Append("  LeftEyeUpper2: ").Append(LeftEyeUpper2).Append("\n");
            sb.Append("  LeftEyeLower2: ").Append(LeftEyeLower2).Append("\n");
            sb.Append("  LeftEyeLower3: ").Append(LeftEyeLower3).Append("\n");
            sb.Append("  LeftEyebrowUpper: ").Append(LeftEyebrowUpper).Append("\n");
            sb.Append("  LeftEyebrowLower: ").Append(LeftEyebrowLower).Append("\n");
            sb.Append("  LeftEyeIris: ").Append(LeftEyeIris).Append("\n");
            sb.Append("  MidwayBetweenEyes: ").Append(MidwayBetweenEyes).Append("\n");
            sb.Append("  NoseTip: ").Append(NoseTip).Append("\n");
            sb.Append("  NoseBottom: ").Append(NoseBottom).Append("\n");
            sb.Append("  NoseRightCorner: ").Append(NoseRightCorner).Append("\n");
            sb.Append("  NoseLeftCorner: ").Append(NoseLeftCorner).Append("\n");
            sb.Append("  RightCheek: ").Append(RightCheek).Append("\n");
            sb.Append("  LeftCheek: ").Append(LeftCheek).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
